/*C2*/SET SCHEMA PUBLIC
CONNECT USER SA
INSERT INTO ENTRY_TABLE_1149913155900 VALUES(478,'2013-08-01 16:49:26.126000000','Jackson 2.1 was released... quite a while ago :)','<JSON>\u000a<Open Source>\u000a<Java>','<p>\u000a      Ok, so I have not been an active blogger for a while. Like, since about \u000a      a year ago. I am hoping to catch up a bit, so let''s start with \u000a      intermediate Jackson releases that have gone out the door since I last \u000a      wrote about Jackson.\u000a    </p>\u000a    <p>\u000a      <b>1. Jackson 2.1</b>\u000a    </p>\u000a    <p>\u000a      Version 2.1 was released almost a year ago, October 2012.\u000a    </p>\u000a    <p>\u000a      After big bang of 2.0 release -- what with all the crazy new features \u000a      like Object Id handling (for fully cyclic object graphs), 2.1 was \u000a      expected to be more minor release in every way.\u000a    </p>\u000a    <p>\u000a      But, that was not to be... instead, 2.1 packed an impressive set of \u000a      improvements of its own.\u000a    </p>\u000a    <p>\u000a      For more complete handling of what exactly was added, you can check out \u000a      my <a href="https://github.com/FasterXML/jackson-docs/wiki/Presentation-Jackson-2.1-Overview">Jackson \u000a      2.1 Overview</a> presentation I gave at <a href="http://www.wordnik.com/">Wordnik</a> \u000a      (thanks Tony and folks!). Note that links to this and other \u000a      presentations can be found from <a href="https://github.com/FasterXML/jackson-docs">Jackson \u000a      Docs</a> github repo.\u000a    </p>\u000a    <p>\u000a      But here''s a Reader''s Digest version.\u000a    </p>\u000a    <p>\u000a      <b>2. Shape-shifting</b>\u000a    </p>\u000a    <p>\u000a      <i>@JsonFormat</i> annotation was added in Jackson 2.0, but was not used \u000a      by many datatypes. With 2.1, there are interesting (and back then, \u000a      experimental; but it is much more stable now!) new features to let you \u000a      change the &quot;shape&quot; (JSON Structure) of some of common Java datatypes:\u000a    </p>\u000a    <ul>\u000a      <li>\u000a        Serialize Enums as JSON Objects instead of Strings: useful for \u000a        serialization, but can not deserialize back (how would that work? \u000a        Enums are singletons)\u000a      </li>\u000a      <li>\u000a        Collections (Sets, Lists) as JSON Objects (instead of arrays): useful \u000a        for custom Collections that add extra properties -- can also \u000a        deserialize, with proper use of @JsonCreator annotations (or custom \u000a        deserializer)\u000a      </li>\u000a      <li>\u000a        POJOs as Arrays! Instead of having name/value pairs, you will get JSON \u000a        arrays where position indicates which property is being used (make \u000a        sure to use @JsonPropertyOrder annotation to define ordering!)\u000a      </li>\u000a    </ul>\u000a    <p>\u000a      Of these, the last option is probably the most interesting. It can make \u000a      JSON as compact as CSV; and in fact can compete with binary formats in \u000a      many cases, especially if values are mostly Strings.<br>A simple example \u000a      would be:\u000a    </p>\u000a    <pre>  @JsonFormat(shape=JsonFormat.Shape.ARRAY)\u000a  @JsonPropertyOrder(alphabetic=true)\u000a  public class Point {\u000a    public int x, y;\u000a  }</pre>\u000a    <p>\u000a      <br>\u000a      which, when serialized, could look like:\u000a    </p>\u000a    <pre>  [ 1, 2]</pre>\u000a    <p>\u000a      instead of earlier\u000a    </p>\u000a    <pre>  { &quot;x&quot;:1, &quot;y&quot;:2 }</pre>\u000a    <p>\u000a      <b>3. Chunked (partial) Binary Data reads, writes</b>\u000a    </p>\u000a    <p>\u000a      When dealing with really large data, granularity of <i>JsonParser</i> \u000a      and <i>JsonGenerator</i> works well, except for case of long JSON \u000a      Strings; for example, ones that contain Base64-encoded data.\u000a    </p>',TRUE,NULL,'Tatu Saloranta\u0009cowtowncoder@yahoo.com\u0009http://www.cowtowncoder.com/author-cowtowncoder.html','','java, json, jackson','','','')
